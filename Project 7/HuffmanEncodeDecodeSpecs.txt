        Project 7
        
In your project 3, you completed the Huffman coding algorithm steps: step 1, 2, 3, and step 4. This project is the follow-up of your project 3.  In this project, you will add an encoding method and a decoding method to your project 3 to do text data compression and decompression. 

Summary of this project: 

1)  Do a modification of the source code of your project 3 as below:
a) Add the following to the data structure/class/method to your project 3:

	- charCode [256] (string) // a 1-D array of string data type for storing  Huffman coding for character s, 
			// The index of charCode array is the asci value of character s (as in your project 1.)

	- constructCharCode (T, code) // the constructCharCode method in this project will NOT output the codes to an out file, instead the codes will be stored in the charCode array.
	
	- Adding the encode method  to do encoding (compression).
	- Adding the decode method to do decoding (de-compression).
	 
- Adding a userInterface ( ) to do the encoding and decoding tasks.


2)  In the user Interface, the user will be asked to see if he/she want to compress a file:
(‘Y’ for yes, ‘N’ for no.)
  if ‘N’, exit the program
  is ‘Y’, you ask the user  for the name of a text file to be compressed.

3) Your program opens the text file and call Encode (…)  method to perform compression on the text file and outputs the result to a text file.  

4) The name of the compressed file is to be created during the run time of your program, using the original file name with an extension “ _Compressed.”  For example, if the name of the original text is “data1”, then the name of the compressed file should be “data1_Compressed”.   (This can be done simply using string concatenation.) 
  
5) Close the compressed file.

6) To make sure your encoding method works correctly, your program will open the compressed file (after it is closed) and call Decode(…)  method to perform the de-compression.  Your program outputs the de-compressed result to a text file.  (If your program works correctly, the content of the de-compressed file should be the same as the original file.) 

7) The name of the de-compressed file is created, using the original file name with an extension “_deCompressed”. For example, if the name of the original text is “data1”, then the name of the de-compressed file should be “data1_deCompressed”. 
   
8) Closed the de-compressed file.
   // after this step your directory should have three files: data1, data1_Compressed, and data1_deCompressed.

9) Repeat 2) to 8) until user type “N” to exit the program.

10) You will be provided with two data files: data1 and data2 for you to test your  encoding and de-coding of your program.
     
11) You are to re-use codes in your project 3. Therefore, the specs below only provide those additional data structures and methods that you need for this project.  


I. Input: A file contains a list of <char prob> pairs with the following format. The input prob are integer, has been multiplied by 100, i.e., a prob equal to .40 will be given as 40, char should be treated as string. 

Example:
	char1  prob1  
	char2  prob2
	char3  prob3
  :
  :
  charn  probn  



II. Outputs: 
- outFile: for your debugging outputs, as stated in the specs
- compressFile and de-compressFile are specified below.
